import { GoogleSpreadsheet } from "google-spreadsheet";
import { JWT } from "google-auth-library";
import {
  db,
  createLog,
  getLoggedInUser,
  checkCollectionExists,
  getLastReportEndDate,
} from "@utils/firebase";
import {
  collection,
  where,
  Timestamp,
  doc,
  setDoc,
  orderBy,
  limit,
  getDocs,
  query,
  getDoc,
  updateDoc,
  startAfter,
} from "firebase/firestore";
import { NextResponse } from "next/server";

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.GOOGLE_CLIENT_EMAIL,
  key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, "\n"),
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});

export const report = new GoogleSpreadsheet(
  process.env.GOOGLE_SHEET_ID,
  serviceAccountAuth
);

export const generateReport = async () => {
  try {
    await report.loadInfo();
    const sheet = await report.addSheet({
      title: "startDate - endDate",
      headerRowIndex: 2,
      headerValues: [
        "Year",
        "Month",
        "Day",
        "Time",
        "Expenses",
        "Income",
        "Profit",
      ],
    });

    let range = {
      startRowIndex: 0, // 0-indexed, first row
      endRowIndex: 1, // 1-indexed, second row (exclusive)
      startColumnIndex: 0, // 0-indexed, first column (A)
      endColumnIndex: 7, // 7-indexed, eighth column (H, exclusive)
    };

    await sheet.mergeCells(range, "MERGE_ALL");
    await sheet.loadCells("A1:G1");
    const title = sheet.getCellByA1("A1:G1");
    title.value = "Audit Summary";
    title.textFormat = { bold: true };
    title.backgroundColor = { red: 0.2, green: 0.6, blue: 0.8 };
    await sheet.saveUpdatedCells();

    for (let i = 0; i < 2; i++) {
      await sheet.addRow({
        Year: 2024,
        Month: "October",
        Day: 24,
        Time: 132,
        Expenses: 123,
        Income: 12,
        Profit: 123,
      });
    }

    await sheet.addRow(["", "", "", "Sum", "", "", ""]);
    await sheet.addRow(["Cash in-flow"]);
    await sheet.addRow(["Cash out-flow"]);
    await sheet.addRow(["Total"]);

    range = {};
    const total = sheet.getCellsInRange();

    // const audits = [];

    // const auditReportRef = collection(db, "AuditReport");
    // let q = query(auditReportRef, where("report_id", "==", reportId));
    // let querySnapshot = await getDocs(q);
    // const auditReports = querySnapshot.docs.map((doc) => doc.data());

    // let promises = auditReports.map(async (doc) => {
    //   const auditRef = collection(db, "Audit", doc.audit_id);
    //   querySnapshot = await getDoc(auditRef);
    //   const audit = querySnapshot.data();
    //   audits.push(audit);

    //   const date = new Date(audit.audit_timestamp);

    //   await sheet.addRow({
    //     Year: date.getFullYear(),
    //     Month: date.toLocaleString("default", { month: "long" }),
    //     Day: date.getDate(),
    //     Time: date.toLocaleTimeString(),
    //     Expenses: audit.audit_total_expense,
    //     Income: audit.audit_gross_income,
    //     Profit: audit.audit_net_profit,
    //   });
    // });
    // await Promise.all(promises);
  } catch (error) {
    console.log(error);
  }
};
